# HTML과 CSS


    - MPA : Multi Page Application


    - SPA : Single Page Application




# JavaScript 자료형


    - Number


    - String


    - Boolean


    - Null


    - Undefined


    - Array


    - Object : key와 value로 이루어진 쌍의 집합




# JavaScript 연산자


    - 대입 연산자 : 왼쪽 = 오른쪽


    - 산술 연산자 : +, -, , /, %, *


    - 대입+산술 연산자 : +=, -=, *=, /=


    - 증가 연산자 : ++

        : postfix 방식 : a++

        : prefix 방식 : ++a


    - 감소 연산자 : --


    - 관계(비교) 연산자 : <, >, <=, >=


    - 동등 연산자 : ==, !(부정)=


    - 일치 연산자(자료형까지 비교) : ===, !==


    - 이진 논리 연산자 : &&, ||


    - 조건부(삼항) 연산자 : 조건식 ? true일 경우 : false일 경우

        ┌ JS ───
        │
        │   /* postfix vs prefix */
        │   
        │   let a = 1;
        │   let b = a++; // a++하면 b에 a++ 값이 대입되는 것과 별개로 a 값이 1 증가(++)함
        │   
        │   console.log(a, b);
        │   // 출력 결과 : 2, 1
        │   
        │   let c = 1;
        │   let d = ++c;
        │   
        │   console.log(c, d);
        │   // 출력 결과 : 2, 2
        │ 
        └────




# 리액트의 장점


    - 빠른 업데이트 & 렌더링 속도

        : Virtual(가상의) DOM

        : 필요한 부분만 re-render


    - Component-Based : 레고 블록 조립하듯 컴포넌트들을 모아서 개발


    - 재사용성(Reusability)

        : 개발 기간이 단축됨

        : 유지 보수가 용이함


    - 활발한 지식공유 & 커뮤니티




# 리액트의 단점


    - 방대한 학습량


    - 높은 상태관리 복잡도




# CRA (Create-React-App, 웹 개발에 필요한 리액트 환경) 명령어


    ┌ Terminal ───
    │
    │   npx create-react-app 프로젝트 이름
    │ 
    └────




# 터미널 명령어


    - 경로 변경

        ┌ Terminal ───
        │
        │   cd 경로/폴더명
        │ 
        └────


    - 애플리케이션 실행

        ┌ Terminal ───
        │
        │   npm start
        │ 
        └────




# JSX의 정의


    JavaScript + XML/HTML




# JSX 코드


    ┌ JSX ───
    │
    │   const element = <h1>Hello, world!</h1>
    │ 
    └────




# JSX의 역할


    XML과 HTML을 JavaScript로 변환 : createElement




# createElement의 파라미터


    React.createElement(
        type,
        [props],
        [...children]
    )




# JSX의 장점


    - 코드의 간결화 → 가독성 향상


    - 버그를 발견하기 쉬움


    - Injection Attacks 방어




# JSX 사용법


    JavaScript 코드 + XML/HTML




# Elements란?


    - 사전적 정의 : 어떤 물체를 구성하는 성분


    - React 내 정의 : Elements are the smallest building blocks of React apps. (리액트 앱을 구성하는 가장 작은 블록들)


    - React Elements는 DOM Elements의 가상 표현


    - 화면에서 보이는 것들을 기술




# Elements의 생김새


    - 리액트 Elements는 자바스크립트 객체 형태로 존재


    - 모든 컴포넌트는 createElement를 통해 element로 변환됨

        ┌ JSX ───
        │
        │   {
        │       type: 'div',
        │       props: {
        │           children: [
        │               {
        │                   type: 'p',
        │                   props: {
        │                       children: '내용을 확인하셨으면 확인 버튼을 눌러주세요.'
        │                   }
        │               },
        │               {
        │                   type: Button,
        │                   props: {
        │                       color: 'green',
        │                       children: '확인'
        │                   }
        │               }
        │           ]
        │       }
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   {
        │       type: 'div',
        │       props: {
        │           children: [
        │               {
        │                   type: 'p',
        │                   props: {
        │                       children: '내용을 확인하셨으면 확인 버튼을 눌러주세요.'
        │                   }
        │               },
        │               {
        │                   type: 'button',
        │                   props: {
        │                       className: 'bg-green',
        │                       children: {
        │                           type: 'b',
        │                           props: {
        │                               children: '확인'
        │                           }
        │                       }
        │                   }
        │               }
        │           ]
        │       }
        │   }
        │ 
        └────




# Elements의 특징


    불변성(immutable = im + mutable) : Elements 생성 후에는 children이나 attributes를 바꿀 수 없다!




# Elements 렌더링하기


    Root DOM Node

        ┌ HTML ───
        │
        │   <div id="root"></div>
        │ 
        └────

        ┌ JSX ───
        │
        │   const element = <h1>안녕, 리액트!</h1>;
        │   ReactDOM.render(element, document.getElementById('root'));
        │ 
        └────




# 렌더링된 Elements를 업데이트하기


    ┌ JSX ───
    │
    │   function tick() {
    │       const element = (
    │           <div>
    │               <h1>안녕, 리액트!</h1>
    │               <h2>현재 시간: {new Date().toLocaleTimeString()}</h2>
    │           </div>
    │       )
    │   
    │       ReactDOM.render(element, document.getElementById('root'));
    │   }
    │ 
    │   setInterval(tick, 1000);
    │ 
    └────




# Component


    - Component-Based : 레고 블록 조립하듯 컴포넌트들을 모아서 개발


    - 입력과 출력 : JavaScript function과 같이 입력과 출력이 있음

        : 입력(Props)

        : 출력(React element)




# Props
    

    - Property(속성)의 줄임말
    

    - Component의 속성
    

    - 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트 객체




# Props의 특징
    

    - Read-Only → 읽을 수만 있다 → 값을 변경할 수 없다
    

    - 모든 리액트 컴포넌트는 Props를 직접 바꿀 수 없고, 같은 Props에 대해서는 항상 같은 결과를 보여줄 것!




# JavaScript 함수의 속성


    ┌ JS ───
    │
    │   /* Pure한 함수 : 입력값(input)을 변경하지 않으며, 같은 입력값에 대해서는 항상 같은 출력(output)을 리턴 */
    │   function sum(a, b) {
    │       return a + b;
    │   }
    │   
    │   /* Impure한 함수 : 입력값(input)을 변경 */
    │   function withdraw(account, amount) {
    │       account.total = amount;
    │   }
    │ 
    └────




# Props 사용법


    ┌ JSX ───
    │
    │   function App(props) {
    │       return (
    │           <Profile
    │               name="소플"
    │               introduction="안녕하세요, 소플입니다."
    │               viewCount={1500}
    │           />
    │       );
    │   }
    │ 
    └────


    ┌ JSX ───
    │
    │   function App(props) {
    │       return (
    │           <Layout
    │               width={2560}
    │               height={1440}
    │               header={
    │                   <Header title="소플의 블로그입니다." />
    │               }
    │               footer={
    │                   <Footer />
    │               }
    │           />
    │       );
    │   }
    │ 
    └────




# Component 만들기
    

    - Class Component
    

    - Function Component → Hook


    ┌ JSX ───
    │
    │   /* Function Component */
    │   function Welcome(props) {
    │       return <h1>안녕, {props.name}</h1>;
    │   }
    │ 
    └────


    ┌ JSX ───
    │
    │   /* Class Component */
    │   class Welcome extends React.Component {
    │       render() {
    │           return <h1>안녕, {this.props.name}</h1>;
    │       }
    │   }
    │ 
    └────




# Component의 이름
    

    Component 이름은 항상 대문자로 시작해야 한다!

        ┌ JSX ───
        │
        │   /* HTML div 태그로 인식 */
        │   const element = <div />;
        │   
        │   /* Welcome이라는 리액트 Component로 인식 */
        │   const element = <Welcome name="인제" />;
        │ 
        └────




# Component 렌더링


    ┌ JSX ───
    │
    │   function Welcome(props) {
    │       return <h1>안녕, {props.name}</h1>;
    │   }
    │       
    │   const element = <Welcome name="인제" />;
    │   ReactDOM.render(
    │       element,
    │       document.getElementById('root')
    │   );
    │ 
    └────




# Component 합성


    복잡한 화면을 여러 개의 Component로 나눠서 구현 가능!

        ┌ JSX ───
        │
        │   function Welcome(props) {
        │       return <h1>Hello, {props.name}</h1>;
        │   }
        │   
        │   function App(props) {
        │       return (
        │           <div>
        │               <Welcome name="Mike" />
        │               <Welcome name="Steve" />
        │               <Welcome name="Jane" />
        │           </div>
        │       );
        │   }
        │   
        │   ReactDOM.render(
        │       <App />,
        │       document.getElementById('root')
        │   )
        │ 
        └────




# Component 추출
    

    - 큰 컴포넌트를 산산조각내자!
    

    - 재사용성 ↑
    

    - 개발 속도 ↑


    ┌ JSX ───
    │
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <div className="user-info">
    │                   <img className="avatar"
    │                       src={props.author.avatarUrl}
    │                       alt={props.author.name}
    │                   />
    │                   <div className="user-info-name">
    │                       {props.author.name}
    │                   </div>
    │               </div>
    │   
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │   
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────


    ┌ JSX ───
    │
    │   /* Avatar 추출하기 */
    │   function Avatar(props) {
    │       return (
    │           <img className="avatar"
    │               src={props.user.avatarUrl}
    │               alt={props.user.name}
    │           />
    │       );
    │   }
    │   
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <div className="user-info">
    │                   <Avatar user={props.author} />
    │                   <div className="user-info-name">
    │                       {props.author.name}
    │                   </div>
    │               </div>
    │   
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │   
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────


    ┌ JSX ───
    │
    │   /* Avatar 추출하기 */
    │   function Avatar(props) {
    │       return (
    │           <img className="avatar"
    │               src={props.user.avatarUrl}
    │               alt={props.user.name}
    │           />
    │       );
    │   }
    │   
    │   /* UserInfo 추출하기 */
    │   function UserInfo(props) {
    │       return (
    │           <div className="user-info">
    │               <Avatar user={props.user} />
    │               <div className="user-info-name">
    │                   {props.user.name}
    │               </div>
    │           </div>
    │       );
    │   }
    │   
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <UserInfo user={props.author} />
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────




# State


    - 리액트 Component의

        : 상태

        : 데이터

        : 변경 가능한 데이터


    - state가 변하면 재렌더링되기 때문에, state는 렌더링이나 데이터 흐름에 사용되는 값만 포함


    - state는 JavaScript 객체

        ┌ JSX ───
        │
        │   class LikeButton extends React.Component {
        │       constructor(props) {
        │           super(props);
        │           
        │           // 현재 component의 state를 정의
        │           this.state = {
        │               liked: false
        │           };
        │       }
        │   
        │       ...
        │   }
        │ 
        └────


    - state는 직접 수정할 수 없다 (하면 안 된다)

        ┌ JSX ───
        │
        │   // state를 직접 수정 (잘못된 사용법)
        │   this.state = {
        │       name: 'Inje'
        │   };
        │   
        │   // setState 함수를 통한 수정 (정상적인 사용법)
        │   this.setState({
        │       name: 'Inje'
        │   });
        │ 
        └────




# Lifecycle


    - 리액트 Compomnent의 생명주기

        : mount(출생)

        : upcate(인생)

        : unmount(사망)




# Memoization


    - 정의 : 비용이 높은, 연산량이 많이 드는 함수의 호출 결과를 저장해두었다가 같은 입력 값으로 함수를 호출하면 새로 함수를 호출하지 않고 이전에 저장해놨던 호출 결과를 바로 반환하는 것


    - 특징

        : 결과를 받기까지의 시간이 짧아짐

        : 불필요한 중복 연산을 하지 않기 때문에 자원을 적게 씀


    - Memoized Value : Memoization의 결과값




# useMemo()


    ┌ JSX ───
    │
    │   const memoizedValue = useMemo(() => {
    │       return computeExpensiveValue(의존성 변수1, 의존성 변수2); // 연산량이 높은 작업을 수행하여 결과를 반환
    │   }, [의존성 변수1, 의존성 변수2]);
    │ 
    └────


    - 특징

        : useMemo로 전달된 함수는 렌더링이 일어나는 동안 실행됨

        : 렌더링이 일어나는 동안 실행돼서는 안 될 작업을 useMemo의 함수에 넣으면 안 됨
        (useEffectHook에서 실행돼야 할 사이드이벡트 같은 것, 서버에서 데이터 받아오기, 수동으로 DOM을 변경하는 작업 등)
    

    - 의존성 배열을 넣지 않을 경우, 매 렌더링마다 함수가 실행됨 → 아무 의미 없음

        ┌ JSX ───
        │
        │   const memoizedValue = useMemo(() => computeExpensiveValue(a, b));
        │ 
        └────


    - 의존성 배열이 빈 배열일 경우, 컴포넌트 마운트 시에만 호출됨

        ┌ JSX ───
        │
        │   const memoizedValue = useMemo(() => {
        │       return computeExpensiveValue(a, b);
        │   }, []);
        │ 
        └────




# useCallback()


    - useMemo() Hook과 유사하지만 값이 아닌 함수를 반환

        ┌ JSX ───
        │
        │   const memoizedCallback = useCallback(() => {
        │       doSomething(의존성 변수1, 의존성 변수2); // callback : 파라미터로 받는 함수 (ex. doSomething();)
        │   }, [의존성 변수1, 의존성 변수2]);
        │ 
        └────


    - useCallback 사용하지 않은 예시

        ┌ JSX ───
        │
        │   import { useState } from "react";
        │   
        │   function ParentComponent(props) {
        │       const [count, setCount] = useState(0);
        │   
        │       /* 재렌더링될 때마다 매번 함수가 새로 정의됨 */
        │       const handleClick = (event) => {
        │           // 클릭 이벤트 처리
        │       };
        │   
        │       return (
        │           <div>
        │               <button
        │                   onClick={() => {
        │                       setCount(count + 1);
        │                   }}
        │               >
        │                   {count}
        │               </button}
        │               <ChildComponent handleClick={handleClick} />
        │           </div>
        │       );
        │   }
        │ 
        └────


    - useCallback 사용한 예시

        ┌ JSX ───
        │
        │   import { useState, useCallback } from "react";
        │   
        │   function ParentComponent(props) {
        │       const [count, setCount] = useState(0);
        │   
        │       /* 컴포넌트가 마운트될 때만 함수가 정의됨 */
        │       const handleClick = useCallback((event) => {
        │           // 클릭 이벤트 처리
        │       }, []);
        │   
        │       return (
        │           <div>
        │               <button
        │                   onClick={() => {
        │                       setCount(count + 1);
        │                   }}
        │               >
        │                   {count}
        │               </button}
        │               <ChildComponent handleClick={handleClick} />
        │           </div>
        │       );
        │   }
        │ 
        └────




# useRef


    - Referencse(특정 컴포넌트에 접근할 수 있는 객체)를 사용하기 위한 Hook


    - refObject.current(현재 참조하고 있는 Element)


    - 사용법

        ┌ JSX ───
        │
        │   const refContainer = useRef(초깃값);
        │ 
        └────


    - 예시

        ┌ JSX ───
        │
        │   function TextInputWithFocusButton(props) {
        │       const inputElem = useRef(null);
        │   
        │       const onButtonClick = () => {
        │           inputElem.current.focus(); // `current`는 마운트된 input element를 가리킴
        │       };
        │   
        │       return (
        │           <>
        │               <input ref={inputElem} type="text" />
        │               <button onClick={onButtonClick}>
        │                   Focus the input
        │               </button>
        │           </>
        │       );
        │   }
        │ 
        └────


    - useRef() Hook은 내부의 데이터가 변경되었을 때 별도로 알리지 않음


    - Callback ref

        ┌ JSX ───
        │
        │   function MeasureExample(props) {
        │       const [height, setHeight] = useState(0);
        │   
        │       const measuredRef = useCallback(node => {
        │           if (node !== null) {
        │               setHeight(node.getBoundingClientRect().height);
        │           }
        │       }, []);
        │   
        │       return (
        │           <>
        │               <h1 ref={measuredRef}>안녕, 리액트</h1>
        │               <h2>위 헤더의 높이는 {Math.round(height)}px 입니다.</h2>
        │           </>
        │       );
        │   }
        │ 
        └────




# Hook의 규칙


    - Hook은 무조건 최상위 레벨에서만 호출 : 컴포넌트가 렌더링될 때마다 매번 같은 순서로 호출되어야 함

        : 잘못된 Hook 사용 예시

        ┌ JSX ───
        │
        │   function MyComponent(props) {
        │       const [name, setName] = useState('Inje');
        │   
        │       if (name !== '') {
        │           useEffect(() => {
        │               ...
        │           });
        │       }
        │   
        │       ...
        │   }
        │ 
        └────


    - 리액트 함수 컴포넌트에서만 Hook을 호출해야 함


    - eslint-plugin-react-hooks: Hook의 규칙을 따르도록 강제해주는 플러그인




# Custom Hook을 만들어야 하는 상황


    - 사용 전 예시

        ┌ JSX ───
        │
        │   import React, { useState, useEffect } from "react"
        │   
        │   function UserStatus(props) {
        │       const [isOnline, setIsOnline] = useState(null);
        │   
        │       useEffect(() => {
        │           function handleStatusChange(state) {
        │               setIsOnline(status.isOnline);
        │           }
        │   
        │           ServerAPI.subscribeUserStatus(props.user.id, handleStatusChange);
        │           return () => {
        │               ServerAPI.unsubscribeUserStatus(props.user.id, handleStatusChange);
        │           };
        │       });
        │   
        │       if (isOnline === null) {
        │           return '대기중...';
        │       }
        │       
        │       return isOnline ? '온라인' : '오프라인';
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   import React, { useState, useEffect } from "react"
        │   
        │   function UserListItem(props) {
        │       const [isOnline, setIsOnline] = useState(null);
        │   
        │       useEffect(() => {
        │           function handleStatusChange(state) {
        │               setIsOnline(status.isOnline);
        │           }
        │   
        │           ServerAPI.subscribeUserStatus(props.user.id, handleStatusChange);
        │           return () => {
        │               ServerAPI.unsubscribeUserStatus(props.user.id, handleStatusChange);
        │           };
        │       });
        │   
        │       return (
        │           <li style={{ color: isOnline ? 'green' : 'black' }}>
        │               {props.user.name}
        │           </li>
        │       );
        │   }
        │ 
        └────


    - Custom Hook 추출하기

        : Custom Hook : 이름이 use로 시작하고 내부에서 다른 Hook을 호출하는 하나의 자바스크립트 함수

        ┌ JSX ───
        │
        │   import { useState, useEffect } from "react";
        │   
        │   function useUserStatus(userId) {
        │       const [isOnline, setIsOnline] = useState(null);
        │   
        │       useEffect(() => {
        │           function handleStatusChange(status) {
        │               setIsOnline(status.isOnline);
        │           }
        │   
        │           ServerAPI.subscribeUserStatus(props.user.id, handleStatusChange);
        │           return () => {
        │               ServerAPI.unsubscribeUserStatus(props.user.id, handleStatusChange);
        │           };
        │       });
        │   
        │       return isOnline;
        │   }
        │ 
        └────


    - 사용 후 예시

        ┌ JSX ───
        │
        │   function UserStatus(props) {
        │       const isOnline = useUserStatus(props.user.id);
        │   
        │       if (isOnline === null) {
        │           return '대기중...';
        │       }
        │   
        │       return isOnline ? '온라인' : '오프라인';
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   function UserListItem(props) {
        │       const isOnline = useUserStatus(props.user.id);
        │   
        │       return (
        │           <li style={{ color: isOnline ? 'green' : 'black' }}>
        │               {props.user.name}
        │           </li>
        │       );
        │   }
        │ 
        └────


    - Custom Hook의 이름은 꼭 use로 시작해야 함


    - 여러 개의 컴포넌트에서 하나의 Custom Hook을 사용할 때 컴포넌트 내부에 있는 모든 state와 effects는 전부 분리되어 있음


    - 각 Custom Hook 호출에 대해서 분리된 state를 얻게 됨


    - 각 Custom Hook의 호출 또한 완전히 독립적




# Hook들 사이에서 데이터를 공유하는 방법


    ┌ JSX ───
    │
    │   const userList = [
    │       { id: 1, name: 'Inje' },
    │       { id: 2, name: 'Mike' },
    │       { id: 3, name: 'Steve' },
    │   ];
    │   
    │   function ChatUserSelector(props) {
    │       const [userId, setUserId] = useState(1);
    │       const isUserOnline = useUserStatus(userId);
    │   
    │       return (
    │           <>
    │               <Circle color={isUserOnline ? 'green' : 'red'} />
    │               <select
    │                   value={userId}
    │                   onChange={event => setUserId(Number(event.target.value))}
    │               >
    │                   {userList.map(user => (
    │                       <option key={user.id} value={user.id}>
    │                           {user.name}
    │                       </option>
    │                   ))}
    │               </select>
    │           </>
    │       );
    │   }
    │ 
    └────




# Event


    - DOM의 Event

        ┌ JSX ───
        │
        │   <button onclick="activate()">
        │       Activate
        │   </button>
        │ 
        └────


    - React의 Event

        ┌ JSX ───
        │
        │   <button onClick={activate}>
        │       Activate
        │   </button>
        │ 
        └────


    - Event Handler(Listener)

        : 어떤 이벤트가 발생했을 때 해당 이벤트를 처리하는 함수

        ┌ JSX : bind 필요 O ───
        │
        │   class Toggle extends React.Component {
        │       constructor(props) {
        │           super(props);
        │   
        │           this.state = { isToggleOn: true };
        │   
        │           // callback에서 `this`를 사용하기 위해서는 바인딩을 필수적으로 해줘야 합니다.
        │           this.handleClick = this.handleClick.bind(this);
        │       }
        │   
        │       handleClick() {
        │           this.setState(prevState => ({
        │               isToggleOn: !prevState.isToggleOn
        │           }));
        │       }
        │   
        │       render() {
        │           return (
        │               <button onClick={this.handleClick}>
        │                   {this.state.isToggleOn ? '켜짐' : '꺼짐'}
        │               </button>
        │           );
        │       }
        │   }
        │ 
        └────

            ┌ JSX : bind 필요 X, Class fields syntax 필요 O  ───
            │
            │   class MyButton extends React.Component {
            │       handleClick = () => {
            │           console.log('this is: ', this);
            │       }
            │       
            │       render() {
            │           return (
            │               <button onClick={this.handleClick}>
            │                   클릭
            │               </button>
            │           );
            │       }
            │   }
            │ 
            └────

            ┌ JSX : bind 필요 X, Class fields syntax 필요 X, arrow function 필요 O  ───
            │
            │   class MyButton extends React.Component {
            │       handleClick = () => {
            │           console.log('this is: ', this);
            │       }
            │       
            │       render() {
            │           return (
            │               <button onClick={() => this.handleClick()}>
            │                   클릭
            │               </button>
            │           );
            │       }
            │   }
            │ 
            └────

        ┌ JSX : toggle 컴포넌트를 함수 컴포넌트로 변환 ───
        │
        │   function Toggle(props) {
        │       const [isToggleOn, setIsToggleOn] = useState(true);
        │   
        │       // 방법 1. 함수 안에 함수로 정의
        │       function handleClick() {
        │           setIsToggleOn((isToggleOn) => !isToggleOn);
        │       }
        │   
        │       // 방법 2. arrow function 사용하여 정의
        │       const handleClick = () => {
        │           setIsToggleOn((isToggleOn) => !isToggleOn);
        │       }
        │   
        │       return (
        │           <button onClick={handleClick}>
        │               {isToggleOn ? "켜짐" : "꺼짐"}
        │           </button>
        │       );
        │   }
        │ 
        └────




# Event Handler에 Arguments 전달하기


    - Arguments (또는 Parameter, 매개변수)

        : 함수에 전달할 데이터

        ┌ JSX ───
        │
        │   <button onClick={(event) => this.deleteItem(id, event)}>삭제하기</button>
        │   
        │   <button onClick={this.deleteItem.bind(this, id)}>삭제하기</button>
        │ 
        └────

        ┌ JSX ───
        │
        │   function MyButton(props) {
        │       const handleDelete = (id, event) => {
        │           console.log(id, event.target);
        │       };
        │   
        │       return (
        │           <button onClick={(event) => handleDelete(1, event)}>
        │               클릭
        │           </button>
        │       );
        │   }
        │ 
        └────




# Conditional Rendering


    - Condition

        : 조건. 즉 Conditional Rendering은 '조건에 따른 렌더링'. 줄여서 '조건부 렌더링'.


    - 어떠한 조건에 따라서 렌더링이 달라지는 것

        ┌ JSX ───
        │
        │   function UserGreeting(props) {
        │       return <h1>다시 오셨군요!</h1>;
        │   }
        │   
        │   function GuestGreeting(props) {
        │       return <h1>회원가입을 해주세요.</h1>;
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   function Greeting(props) {
        │       const isLoggedIn = props.isLoggedIn;
        │   
        │       if (isLoggedIn) {
        │           return <UserGreeting />;
        │       }
        │       return <GuestGreeting />;
        │   }
        │ 
        └────


    - JavaScript의 Truthy와 Falsy

        : Truthy : true는 아니지만, true로 여겨지는 값

        : Falsy : false는 아니지만, false로 여겨지는 값

        ┌ JSX ───
        │
        │   /* Truthy */
        │   true
        │   {} (empty object)
        │   [] (empty array)
        │   42 (number, not zero)
        │   "0", "false" (string, not empty)
        │   
        │   /* Falsy */
        │   false
        │   0, -0 (zero, minus zero)
        │   0n (BigInt zero)
        │   '', "", `` (empty string)
        │   null
        │   undefined
        │   NaN (not a number)
        │ 
        └────


    - Element Variables

        : 엘리먼트 변수

        : 리액트의 엘리먼트를 변수처럼 다루는 방법

        ┌ JSX ───
        │
        │   function LoginButton(props) {
        │       return (
        │           <button onClick={props.onClick}>
        │               로그인
        │           </button>
        │       );
        │   }
        │   
        │   function LogoutButton(props) {
        │       return (
        │           <button onClick={props.onClick}>
        │               로그아웃
        │           </button>
        │       );
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   function LoginControl(props) {
        │       const [isLoggedIn, setIsLoggedIn] = useState(false);
        │   
        │       const handleLoginClick = () => {
        │           setIsLoggedIn(true);
        │       }
        │   
        │       const handleLogoutClick = () => {
        │           setIsLoggedIn(false);
        │       }
        │   
        │       let button;
        │   
        │       if (isLoggedIn) {
        │           button = <LogoutButton onClick={handleLogoutClick} />;
        │       } else {
        │           button = <LoginButton onClick={handleLoginClick} />;
        │       }
        │   
        │       return (
        │           <div>
        │               <Greeting isoggedIn={isLoggedIn} />
        │               {button}
        │           </div>
        │       )
        │   }
        │ 
        └────

    
    - Inline Conditions

        : In + Line

        : 조건문을 코드 안에 집어넣는 것

        : Inline If : && 연산자를 사용

            # 단축평가 (Short Circuit Evaluation)

                - true && expression → expression

                - false && expression → false

            ┌ JSX ───
            │
            │   function Mailbox(props) {
            │       const unreadMessages = props.unreadMessages;
            │   
            │       return (
            │           <div>
            │               <h1>안녕하세요!</h1>
            │               {unreadMessages.length > 0 &&
            │                   <h2>
            │                       현재 {unreadMessages.length}개의 읽지 않은 메시지가 있습니다.
            │                   </h2>
            │               }
            │           </div>
            │       );
            │   }
            │ 
            └────

            ┌ JSX ───
            │
            │   function Counter(props) {
            │       const count = 0;
            │   
            │       return (
            │           <div>
            │               {count && <h1>현재 카운트: {count}</h1>}
            │           </div>
            │       );
            │   }
            │ 
            └────

        : Inline If-Else : ? 연산자를 사용

            # 삼항 연산자

                - condition ? true : false

            ┌ JSX ───
            │
            │   function UserStatus(props) {
            │       return (
            │           <div>
            │               이 사용자는 현재 <b>{props.isLoggedIn ? '로그인' : '로그인하지 않은'}</b> 상태입니다.
            │           </div>
            │       );
            │   }
            │ 
            └────

            ┌ JSX ───
            │
            │   function LoginControl(props) {
            │       const [isLoggedIn, setIsLoggedIn] = useState(false);
            │   
            │       const handleLoginClick = () => {
            │           setIsLoggedIn(true);
            │       }
            │   
            │       const handleLogoutClick = () => {
            │           setIsLoggedIn(false);
            │       }
            │   
            │       return (
            │           <div>
            │               <Greeting isLoggedIn={isLoggedIn} />
            │               {isLoggedIn
            │                   ? <LogoutButton onClick={handleLogoutClick} />
            │                   : <LoginButton onClick={handleLoginClick} />
            │               }
            │           </div>
            │       );
            │   }
            │ 
            └────


    - Component 렌더링 막기

        : null을 리턴하면 렌더링되지 않음

        ┌ JSX ───
        │
        │   function WarningBanner(props) {
        │       if (!props.warning) {
        │           return null;
        │       }
        │   
        │       return (
        │           <div>경고!</div>
        │       );
        │   }
        │ 
        └────

        ┌ JSX ───
        │
        │   function MainPage(props) {
        │       const [showWarning, setShowWarning] = useState(false);
        │   
        │       const handleToggleClick = () => {
        │           setShowWarning(prevShowWarning => !prevShowWarning);
        │       }
        │   
        │       return (
        │           <div>
        │               <WarningBanner warning={showWarning} />
        │               <button onClick={handleToggleClick}>
        │                   {showWarning ? '감추기' : '보이기'}
        │               </button>
        │           </div>
        │       )
        │   }
        │ 
        └────