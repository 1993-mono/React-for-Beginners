# HTML과 CSS

    - MPA : Multi Page Application

    - SPA : Single Page Application



# JavaScript 자료형

    - Number

    - String

    - Boolean

    - Null

    - Undefined

    - Array

    - Object : key와 value로 이루어진 쌍의 집합



# JavaScript 연산자

    - 대입 연산자 : 왼쪽 = 오른쪽

    - 산술 연산자 : +, -, , /, %, *

    - 대입+산술 연산자 : +=, -=, *=, /=

    - 증가 연산자 : ++

        : postfix 방식 : a++

        : prefix 방식 : ++a

    - 감소 연산자 : --

    - 관계(비교) 연산자 : <, >, <=, >=

    - 동등 연산자 : ==, !(부정)=

    - 일치 연산자(자료형까지 비교) : ===, !==

    - 이진 논리 연산자 : &&, ||

    - 조건부(삼항) 연산자 : 조건식 ? true일 경우 : false일 경우

    ┌ JS ───
    │
    │   /* postfix vs prefix */
    │   
    │   let a = 1;
    │   let b = a++; // a++하면 b에 a++ 값이 대입되는 것과 별개로 a 값이 1 증가(++)함
    │   
    │   console.log(a, b);
    │   // 출력 결과 : 2, 1
    │   
    │   let c = 1;
    │   let d = ++c;
    │   
    │   console.log(c, d);
    │   // 출력 결과 : 2, 2
    │ 
    └────



# 리액트의 장점

    - 빠른 업데이트 & 렌더링 속도

        : Virtual(가상의) DOM

        : 필요한 부분만 re-render

    - Component-Based : 레고 블록 조립하듯 컴포넌트들을 모아서 개발

    - 재사용성(Reusability)

        : 개발 기간이 단축됨

        : 유지 보수가 용이함

    - 활발한 지식공유 & 커뮤니티



# 리액트의 단점

    - 방대한 학습량

    - 높은 상태관리 복잡도



# CRA (Create-React-App, 웹 개발에 필요한 리액트 환경) 명령어

    ┌ Terminal ───
    │
    │   npx create-react-app 프로젝트 이름
    │ 
    └────



# 터미널 명령어

    - 경로 변경

        ┌ Terminal ───
        │
        │   cd 경로/폴더명
        │ 
        └────

    - 애플리케이션 실행

        ┌ Terminal ───
        │
        │   npm start
        │ 
        └────



# JSX의 정의

    JavaScript + XML/HTML



# JSX 코드

    ┌ JSX ───
    │
    │   const element = <h1>Hello, world!</h1>
    │ 
    └────



# JSX의 역할

    XML과 HTML을 JavaScript로 변환 : createElement



# createElement의 파라미터

    React.createElement(
        type,
        [props],
        [...children]
    )



# JSX의 장점

    - 코드의 간결화 → 가독성 향상

    - 버그를 발견하기 쉬움

    - Injection Attacks 방어



# JSX 사용법

    JavaScript 코드 + XML/HTML



# Elements란?

    - 사전적 정의 : 어떤 물체를 구성하는 성분

    - React 내 정의 : Elements are the smallest building blocks of React apps. (리액트 앱을 구성하는 가장 작은 블록들)

    - React Elements는 DOM Elements의 가상 표현

    - 화면에서 보이는 것들을 기술



# Elements의 생김새

    - 리액트 Elements는 자바스크립트 객체 형태로 존재

    - 모든 컴포넌트는 createElement를 통해 element로 변환됨

    ┌ JSX ───
    │
    │   {
    │       type: 'div',
    │       props: {
    │           children: [
    │               {
    │                   type: 'p',
    │                   props: {
    │                       children: '내용을 확인하셨으면 확인 버튼을 눌러주세요.'
    │                   }
    │               },
    │               {
    │                   type: Button,
    │                   props: {
    │                       color: 'green',
    │                       children: '확인'
    │                   }
    │               }
    │           ]
    │       }
    │   }
    │ 
    └────

    ┌ JSX ───
    │
    │   {
    │       type: 'div',
    │       props: {
    │           children: [
    │               {
    │                   type: 'p',
    │                   props: {
    │                       children: '내용을 확인하셨으면 확인 버튼을 눌러주세요.'
    │                   }
    │               },
    │               {
    │                   type: 'button',
    │                   props: {
    │                       className: 'bg-green',
    │                       children: {
    │                           type: 'b',
    │                           props: {
    │                               children: '확인'
    │                           }
    │                       }
    │                   }
    │               }
    │           ]
    │       }
    │   }
    │ 
    └────



# Elements의 특징

    불변성(immutable = im + mutable) : Elements 생성 후에는 children이나 attributes를 바꿀 수 없다!



# Elements 렌더링하기

    Root DOM Node

    ┌ HTML ───
    │
    │   <div id="root"></div>
    │ 
    └────

    ┌ JSX ───
    │
    │   const element = <h1>안녕, 리액트!</h1>;
    │   ReactDOM.render(element, document.getElementById('root'));
    │ 
    └────



# 렌더링된 Elements를 업데이트하기

    ┌ JSX ───
    │
    │   function tick() {
    │       const element = (
    │           <div>
    │               <h1>안녕, 리액트!</h1>
    │               <h2>현재 시간: {new Date().toLocaleTimeString()}</h2>
    │           </div>
    │       )
    │   
    │       ReactDOM.render(element, document.getElementById('root'));
    │   }
    │ 
    │   setInterval(tick, 1000);
    │ 
    └────



# Component

    - Component-Based : 레고 블록 조립하듯 컴포넌트들을 모아서 개발

    - 입력과 출력 : JavaScript function과 같이 입력과 출력이 있음

        : 입력(Props)

        : 출력(React element)



# Props
    
    - Property(속성)의 줄임말
    
    - Component의 속성
    
    - 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트 객체



# Props의 특징
    
    - Read-Only → 읽을 수만 있다 → 값을 변경할 수 없다
    
    - 모든 리액트 컴포넌트는 Props를 직접 바꿀 수 없고, 같은 Props에 대해서는 항상 같은 결과를 보여줄 것!



# JavaScript 함수의 속성

    ┌ JS ───
    │
    │   /* Pure한 함수 : 입력값(input)을 변경하지 않으며, 같은 입력값에 대해서는 항상 같은 출력(output)을 리턴 */
    │   function sum(a, b) {
    │       return a + b;
    │   }
    │   
    │   /* Impure한 함수 : 입력값(input)을 변경 */
    │   function withdraw(account, amount) {
    │       account.total = amount;
    │   }
    │ 
    └────



# Props 사용법

    ┌ JSX ───
    │
    │   function App(props) {
    │       return (
    │           <Profile
    │               name="소플"
    │               introduction="안녕하세요, 소플입니다."
    │               viewCount={1500}
    │           />
    │       );
    │   }
    │ 
    └────

    ┌ JSX ───
    │
    │   function App(props) {
    │       return (
    │           <Layout
    │               width={2560}
    │               height={1440}
    │               header={
    │                   <Header title="소플의 블로그입니다." />
    │               }
    │               footer={
    │                   <Footer />
    │               }
    │           />
    │       );
    │   }
    │ 
    └────



# Component 만들기
    
    - Class Component
    
    - Function Component → Hook

    ┌ JSX ───
    │
    │   /* Function Component */
    │   function Welcome(props) {
    │       return <h1>안녕, {props.name}</h1>;
    │   }
    │ 
    └────

    ┌ JSX ───
    │
    │   /* Class Component */
    │   class Welcome extends React.Component {
    │       render() {
    │           return <h1>안녕, {this.props.name}</h1>;
    │       }
    │   }
    │ 
    └────



# Component의 이름
    
    Component 이름은 항상 대문자로 시작해야 한다!

    ┌ JSX ───
    │
    │   /* HTML div 태그로 인식 */
    │   const element = <div />;
    │   
    │   /* Welcome이라는 리액트 Component로 인식 */
    │   const element = <Welcome name="인제" />;
    │ 
    └────



# Component 렌더링

    ┌ JSX ───
    │
    │   function Welcome(props) {
    │       return <h1>안녕, {props.name}</h1>;
    │   }
    │       
    │   const element = <Welcome name="인제" />;
    │   ReactDOM.render(
    │       element,
    │       document.getElementById('root')
    │   );
    │ 
    └────



# Component 합성

    복잡한 화면을 여러 개의 Component로 나눠서 구현 가능!

    ┌ JSX ───
    │
    │   function Welcome(props) {
    │       return <h1>Hello, {props.name}</h1>;
    │   }
    │   
    │   function App(props) {
    │       return (
    │           <div>
    │               <Welcome name="Mike" />
    │               <Welcome name="Steve" />
    │               <Welcome name="Jane" />
    │           </div>
    │       );
    │   }
    │   
    │   ReactDOM.render(
    │       <App />,
    │       document.getElementById('root')
    │   )
    │ 
    └────



# Component 추출
    
    - 큰 컴포넌트를 산산조각내자!
    
    - 재사용성 ↑
    
    - 개발 속도 ↑

    ┌ JSX ───
    │
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <div className="user-info">
    │                   <img className="avatar"
    │                       src={props.author.avatarUrl}
    │                       alt={props.author.name}
    │                   />
    │                   <div className="user-info-name">
    │                       {props.author.name}
    │                   </div>
    │               </div>
    │   
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │   
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────

    ┌ JSX ───
    │
    │   /* Avatar 추출하기 */
    │   function Avatar(props) {
    │       return (
    │           <img className="avatar"
    │               src={props.user.avatarUrl}
    │               alt={props.user.name}
    │           />
    │       );
    │   }
    │   
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <div className="user-info">
    │                   <Avatar user={props.author} />
    │                   <div className="user-info-name">
    │                       {props.author.name}
    │                   </div>
    │               </div>
    │   
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │   
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────

    ┌ JSX ───
    │
    │   /* Avatar 추출하기 */
    │   function Avatar(props) {
    │       return (
    │           <img className="avatar"
    │               src={props.user.avatarUrl}
    │               alt={props.user.name}
    │           />
    │       );
    │   }
    │   
    │   /* UserInfo 추출하기 */
    │   function UserInfo(props) {
    │       return (
    │           <div className="user-info">
    │               <Avatar user={props.user} />
    │               <div className="user-info-name">
    │                   {props.user.name}
    │               </div>
    │           </div>
    │       );
    │   }
    │   
    │   function Comment(props) {
    │       return (
    │           <div ClassName="comment">
    │               <UserInfo user={props.author} />
    │               <div className="comment=text">
    │                   {props.text}
    │               </div>
    │               <div className="comment-date">
    │                   {formatDate(props.date)}
    │               </div>
    │           </div>
    │       );
    │   }
    │ 
    └────